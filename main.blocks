<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="bz6V=ixc,u?(umS1?-8B" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="sx1},lhV+,Tjd5+t|0_w"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace ExtBoard02 {" line1="    " line2="    /** " line3="     * LEDブロック" line4="     */" line5="    //% blockId=LED_PWM" line6="    //% block=&quot;%pin | のLEDの明るさを | %Value |％で点灯&quot;" line7="    //% weight=80 blockGap=8" line8="    //% Value.min=0 Value.max=100 Value.defl=100" line9="    //% group=&quot;LED&quot; pin.defl=AnalogPin.P0" line10="    export function LED_PWM(pin: AnalogPin,Value: number): void {" line11="        let val = (Value * 1023) / 100;" line12="        pins.analogWritePin(pin, val)" line13="    }" line14="" line15="    //% blockId=LED_OFF" line16="    //% block=&quot;%pin | のLEDをオフにする&quot;" line17="    //% weight=80 blockGap=8e" line18="    //% group=&quot;LED&quot; pin.defl=DigitalPin.P0" line19="    export function LED_OFF(pin: DigitalPin): void {" line20="        pins.digitalWritePin(pin, 0)" line21="    }" line22="" line23="    /**" line24="     * モータ" line25="     */" line26="    //% blockId=Mortor_ON" line27="    //% block=&quot;%pin | のモータを回す&quot;" line28="    //% weight=80 blockGap=8" line29="    //% group=&quot;モータ&quot; pin.defl=DigitalPin.P0" line30="    export function Motor_ON(pin: DigitalPin): void {" line31="        pins.digitalWritePin(pin, 1)" line32="    }" line33="    //% blockId=Mortor_OFF" line34="    //% block=&quot;%pin | のモータを停止&quot;" line35="    //% weight=80 blockGap=8" line36="    //% group=&quot;モータ&quot; pin.defl=DigitalPin.P0" line37="    export function Motor_OFF(pin: DigitalPin): void {" line38="        pins.digitalWritePin(pin, 0)" line39="    }" line40="" line41="    /**" line42="     * 照度センサ" line43="     */" line44="    //% blockId=Brightness block=&quot;%pin | の照度センサの値(0-100) &quot;" line45="    //% pin.fieldEditor=&quot;gridpicker&quot; pin.fieldOptions.columns=4" line46="    //% pin.fieldOptions.tooltips=&quot;false&quot; pin.fieldOptions.width=&quot;250&quot;" line47="    //% group=&quot;照度センサ&quot; pin.defl=AnalogPin.P0" line48="    export function Brightness(pin: AnalogPin): number {" line49="        return (pins.analogReadPin(pin)/1023)*100" line50="    }" line51="" line52="    /**" line53="     * 角度センサ" line54="     */" line55="    //% blockId=Angle block=&quot;%pin | の角度センサの値(0-100) &quot;" line56="    //% pin.fieldEditor=&quot;gridpicker&quot; pin.fieldOptions.columns=4" line57="    //% pin.fieldOptions.tooltips=&quot;false&quot; pin.fieldOptions.width=&quot;250&quot;" line58="    //% group=&quot;角度センサ&quot; pin.defl=AnalogPin.P0" line59="    export function Angle(pin: AnalogPin): number {" line60="        return (pins.analogReadPin(pin) / 1023) * 100" line61="    }" line62="" line63="    /**" line64="     * 測距センサ" line65="     */" line66="    //% blockId=Distance block=&quot;%pin | の測距センサの値(0-100) &quot;" line67="    //% pin.fieldEditor=&quot;gridpicker&quot; pin.fieldOptions.columns=4" line68="    //% pin.fieldOptions.tooltips=&quot;false&quot; pin.fieldOptions.width=&quot;250&quot;" line69="    //% group=&quot;測距センサ&quot; pin.defl=AnalogPin.P0" line70="    export function Distance(pin: AnalogPin): number {" line71="        return (pins.analogReadPin(pin) / 1023) * 100" line72="    }" line73="" line74="    /**" line75="     * 圧力センサ" line76="     */" line77="    //% blockId=Pressure block=&quot;%pin | の圧力センサの値(0-100) &quot;" line78="    //% pin.fieldEditor=&quot;gridpicker&quot; pin.fieldOptions.columns=4" line79="    //% pin.fieldOptions.tooltips=&quot;false&quot; pin.fieldOptions.width=&quot;250&quot;" line80="    //% group=&quot;圧力センサ&quot; pin.defl=AnalogPin.P0" line81="    export function Pressure(pin: AnalogPin): number {" line82="        return (pins.analogReadPin(pin) / 1023) * 100" line83="    }" line84="" line85="    /**" line86="     * 超音波センサ" line87="    */ " line88="    let distanceBackup: number = 0;" line89="    //% blockId=Ultrasonic block=&quot;%pin | の超音波センサ（cm）の値 &quot;" line90="    //% pin.fieldEditor=&quot;gridpicker&quot; pin.fieldOptions.columns=4" line91="    //% pin.fieldOptions.tooltips=&quot;false&quot; pin.fieldOptions.width=&quot;250&quot;" line92="    //% group=&quot;超音波センサ（HC-SR04など：4線式）&quot; pin.defl=DigitalPin.P0" line93="    export function ultrasonicSensor(pin: DigitalPin): number {" line94="        let duration1 = 0;" line95="        let echoPin1 :DigitalPin = DigitalPin.P14;" line96="        let RangeInCentimeters = 0;" line97="" line98="        pins.digitalWritePin(pin, 0);" line99="        control.waitMicros(2);" line100="        pins.digitalWritePin(pin, 1);" line101="        control.waitMicros(20);" line102="        pins.digitalWritePin(pin, 0);" line103="        " line104="        if (pin == DigitalPin.P0) echoPin1 = DigitalPin.P14;" line105="        if (pin == DigitalPin.P1) echoPin1 = DigitalPin.P15;" line106="        if (pin == DigitalPin.P2) echoPin1 = DigitalPin.P16;" line107="        duration1 = pins.pulseIn(echoPin1, PulseValue.High, 50000); // Max duration 50 ms" line108="" line109="        RangeInCentimeters = duration1 * 153 / 44 / 2 / 100;" line110="        if (RangeInCentimeters &gt; 0) distanceBackup = RangeInCentimeters;" line111="        else RangeInCentimeters = distanceBackup;" line112="        basic.pause(50);" line113="        return RangeInCentimeters;" line114="    }" line115="    " line116="    //% blockId=Ultrasonic block=&quot;%pin | の超音波センサ（cm）の値 &quot;" line117="    //% pin.fieldEditor=&quot;gridpicker&quot; pin.fieldOptions.columns=4" line118="    //% pin.fieldOptions.tooltips=&quot;false&quot; pin.fieldOptions.width=&quot;250&quot;" line119="    //% group=&quot;超音波センサ(Grove：3線式)&quot; pin.defl=DigitalPin.P0" line120="    export function ultrasonicSensorGrove(pin: DigitalPin): number {" line121="        let duration2 = 0;" line122="        let echoPin2: DigitalPin = pin;" line123="        let RangeInCentimeters2 = 0;" line124="" line125="        pins.digitalWritePin(pin, 0);" line126="        control.waitMicros(2);" line127="        pins.digitalWritePin(pin, 1);" line128="        control.waitMicros(20);" line129="        pins.digitalWritePin(pin, 0);" line130="        duration2 = pins.pulseIn(echoPin2, PulseValue.High, 50000); // Max duration 50 ms" line131="        RangeInCentimeters2 = duration2 * 153 / 44 / 2 / 100;" line132="        if (RangeInCentimeters2 &gt; 0) distanceBackup = RangeInCentimeters2;" line133="        else RangeInCentimeters2 = distanceBackup;" line134="        basic.pause(50);" line135="        return RangeInCentimeters2;" line136="    }" line137="}" numlines="138"></mutation></block></statement></block></xml>