<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="$hiFGXPUt3Jc7/rV#mDp" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="s.9$rb7`aZu]xi.-Q]z^"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace Board02 {" line1="    " line2="    /**" line3="     * //% blockId=B02_Sensor" line4="     * //% block=&quot;人感センサが反応した&quot;" line5="     * //% weight=80 blockGap=8" line6="     * export function IsDetected(): boolean {" line7="     *     if (pins.digitalReadPin(DigitalPin.P2) == 1)" line8="     *         return true;" line9="     *     return false;" line10="     * }" line11="     */" line12="" line13="" line14="    /** " line15="     * LEDブロック" line16="     */" line17="    //% blockId=LED_PWM" line18="    //% block=&quot;%pin | のLEDの明るさを | %Value |％で点灯&quot;" line19="    //% weight=80 blockGap=8" line20="    //% Value.min=0 Value.max=100 Value.defl=100" line21="    //% group=&quot;LED&quot; pin.defl=AnalogPin.P0" line22="    export function LED_PWM(pin: AnalogPin,Value: number): void {" line23="        let val = (Value * 1023) / 100;" line24="        pins.analogWritePin(pin, val)" line25="    }" line26="" line27="    //% blockId=LED_OFF" line28="    //% block=&quot;%pin | のLEDをオフにする&quot;" line29="    //% weight=80 blockGap=8e" line30="    //% group=&quot;LED&quot; pin.defl=DigitalPin.P0" line31="    export function LED_OFF(pin: DigitalPin): void {" line32="        pins.digitalWritePin(pin, 0)" line33="    }" line34="" line35="    /**" line36="     * モータ" line37="     */" line38="    //% blockId=Mortor_ON" line39="    //% block=&quot;%pin | のモータを回す&quot;" line40="    //% weight=80 blockGap=8" line41="    //% group=&quot;モータ&quot; pin.defl=DigitalPin.P0" line42="    export function Motor_ON(pin: DigitalPin): void {" line43="        pins.digitalWritePin(pin, 1)" line44="    }" line45="    //% blockId=Mortor_OFF" line46="    //% block=&quot;%pin | のモータを停止&quot;" line47="    //% weight=80 blockGap=8" line48="    //% group=&quot;モータ&quot; pin.defl=DigitalPin.P0" line49="    export function Motor_OFF(pin: DigitalPin): void {" line50="        pins.digitalWritePin(pin, 0)" line51="    }" line52="" line53="    /**" line54="     * 照度センサ" line55="     */" line56="    //% blockId=Brightness block=&quot;%pin | の照度センサの値(0-100) &quot;" line57="    //% pin.fieldEditor=&quot;gridpicker&quot; pin.fieldOptions.columns=4" line58="    //% pin.fieldOptions.tooltips=&quot;false&quot; pin.fieldOptions.width=&quot;250&quot;" line59="    //% group=&quot;照度センサ&quot; pin.defl=AnalogPin.P0" line60="    export function Brightness(pin: AnalogPin): number {" line61="        return (pins.analogReadPin(pin)/1023)*100" line62="    }" line63="" line64="    /**" line65="     * 角度センサ" line66="     */" line67="    //% blockId=Angle block=&quot;%pin | の角度センサの値(0-100) &quot;" line68="    //% pin.fieldEditor=&quot;gridpicker&quot; pin.fieldOptions.columns=4" line69="    //% pin.fieldOptions.tooltips=&quot;false&quot; pin.fieldOptions.width=&quot;250&quot;" line70="    //% group=&quot;角度センサ&quot; pin.defl=AnalogPin.P0" line71="    export function Angle(pin: AnalogPin): number {" line72="        return (pins.analogReadPin(pin) / 1023) * 100" line73="    }" line74="" line75="    /**" line76="     * 測距センサ" line77="     */" line78="    //% blockId=Distance block=&quot;%pin | の角度センサの値(0-100) &quot;" line79="    //% pin.fieldEditor=&quot;gridpicker&quot; pin.fieldOptions.columns=4" line80="    //% pin.fieldOptions.tooltips=&quot;false&quot; pin.fieldOptions.width=&quot;250&quot;" line81="    //% group=&quot;測距センサ&quot; pin.defl=AnalogPin.P0" line82="    export function Distance(pin: AnalogPin): number {" line83="        return (pins.analogReadPin(pin) / 1023) * 100" line84="    }" line85="" line86="    /**" line87="     * 圧力センサ" line88="     */" line89="    //% blockId=Pressure block=&quot;%pin | の圧力センサの値(max:100) &quot;" line90="    //% pin.fieldEditor=&quot;gridpicker&quot; pin.fieldOptions.columns=4" line91="    //% pin.fieldOptions.tooltips=&quot;false&quot; pin.fieldOptions.width=&quot;250&quot;" line92="    //% group=&quot;圧力センサ&quot; pin.defl=AnalogPin.P0" line93="    export function Pressure(pin: AnalogPin): number {" line94="        return (pins.analogReadPin(pin) / 1023) * 100" line95="    }" line96="" line97="    /**" line98="     * 超音波センサブロック" line99="     */" line100="    let distanceBackup: number = 0;" line101="    //% blockId=Ultrasonic block=&quot;%pin | の超音波センサ（cm）の値 &quot;" line102="    //% pin.fieldEditor=&quot;gridpicker&quot; pin.fieldOptions.columns=4" line103="    //% pin.fieldOptions.tooltips=&quot;false&quot; pin.fieldOptions.width=&quot;250&quot;" line104="    //% group=&quot;超音波センサ&quot; pin.defl=DigitalPin.P0" line105="    export function ultrasonicSensor(pin: DigitalPin): number {" line106="        let duration = 0;" line107="        let RangeInCentimeters = 0;" line108="" line109="        pins.digitalWritePin(pin, 0);" line110="        control.waitMicros(2);" line111="        pins.digitalWritePin(pin, 1);" line112="        control.waitMicros(20);" line113="        pins.digitalWritePin(pin, 0);" line114="        duration = pins.pulseIn(pin, PulseValue.High, 50000); // Max duration 50 ms" line115="        RangeInCentimeters = duration * 153 / 44 / 2 / 100;" line116="        if (RangeInCentimeters &gt; 0) distanceBackup = RangeInCentimeters;" line117="        else RangeInCentimeters = distanceBackup;" line118="        basic.pause(50);" line119="        return RangeInCentimeters;" line120="    }" line121="}" numlines="122"></mutation></block></statement></block></xml>